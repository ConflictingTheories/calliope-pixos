import { Target } from './shared/types';
/**
 * These are the proxy handlers. Notes:
 * * We have different handlers (different traps) for object/array and
 *    map/set.
 * * When the proxy is muted, use Reflect[trap] and bypass any logic. The
 *    exception is Map/Set methods, where we must bind `this` first
 * * `ORIGINAL` lets us unwrap a proxied object
 * * We redirect to the 'next version' of a target if it has been changed
 */
export declare const getHandlerForObject: <T extends Target>(targetObject: T) => ProxyHandler<T>;
/**
 * Wrap an item in a proxy
 */
export declare const createShallow: <T extends any>(target: T) => T;
