import { CollectorComponent, Target } from './types';
export declare const debugOn: () => void;
export declare const debugOff: () => void;
export declare const debug: (cb: () => void) => void;
export declare const logGet: (target: Target, prop?: any, value?: any) => void;
export declare const logSet: (target: Target, prop: any, value?: any) => void;
export declare const logDelete: (target: Target, prop: any) => void;
export declare const logUpdate: (component: CollectorComponent, propsUpdated: string[]) => void;
declare type NameMaker = (obj: any) => string;
/**
 * Return an object where the keys are component names and the values are
 * arrays of the store properties the component is subscribed to
 */
export declare const getListenersByComponent: (matcher?: string | RegExp | undefined, makeName?: NameMaker | undefined) => {
    [p: string]: string[];
};
/**
 * Return an object where the keys are store properties and the values are
 * the names of the components that listen to the property
 */
export declare const getComponentsByListener: (matcher?: string | RegExp | undefined, makeName?: NameMaker | undefined) => {
    [p: string]: string[];
};
export {};
