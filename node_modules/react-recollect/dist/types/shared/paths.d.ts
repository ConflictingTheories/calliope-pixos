import { PropPath, Target } from './types';
/**
 * Convert a target and a prop into a user-friendly string like store.tasks.1.done
 */
export declare const makeUserString: (propPath: PropPath) => string;
export declare const makeInternalString: (propPath: PropPath) => string;
/**
 * Convert an internal string like `one~~~two~~~three` into a user-facing string
 * like `one.two.three`
 */
export declare const internalToUser: (internalPath: string) => string;
/**
 * Takes the path stored in an object, and a new prop, and returns the two
 * combined
 */
export declare const extend: (target: Target, prop?: any) => PropPath;
/**
 * Convert a target and a prop into a user-friendly string like store.tasks.1.done
 */
export declare const extendToUserString: (target: Target, prop?: any) => string;
export declare const addProp: (target: Target, propPath: PropPath) => void;
export declare const get: (target: Target) => PropPath;
export declare const has: (target: any) => boolean;
export declare const set: (mutableTarget: Target, propPath: PropPath) => void;
