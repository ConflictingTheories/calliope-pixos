import { LS_KEYS } from './constants.js';
import state$1 from './state.js';
import { getValue } from './utils.js';
import { extendToUserString } from './paths.js';
import { get, set } from './ls.js';

const DEBUG_ON = 'on';
const DEBUG_OFF = 'off';
let DEBUG = get(LS_KEYS.RR_DEBUG) || DEBUG_OFF;
if (DEBUG === DEBUG_ON) {
    console.info('Recollect debugging is enabled. Type __RR__.debugOff() to turn it off.');
}
const debugOn = () => {
    DEBUG = DEBUG_ON;
    set(LS_KEYS.RR_DEBUG, DEBUG_ON);
};
const debugOff = () => {
    DEBUG = DEBUG_OFF;
    set(LS_KEYS.RR_DEBUG, DEBUG_OFF);
};
const debug = (cb) => {
    if (DEBUG === DEBUG_ON)
        cb();
};
const logGet = (target, prop, value) => {
    debug(() => {
        console.groupCollapsed(`GET: ${extendToUserString(target, prop)}`);
        console.info(`Component: <${state$1.currentComponent._name}>`);
        if (typeof value !== 'undefined') {
            console.info('Value:', value);
        }
        console.groupEnd();
    });
};
const logSet = (target, prop, value) => {
    debug(() => {
        console.groupCollapsed(`SET: ${extendToUserString(target, prop)}`);
        console.info('From:', getValue(target, prop));
        console.info('To:  ', value);
        console.groupEnd();
    });
};
const logDelete = (target, prop) => {
    debug(() => {
        console.groupCollapsed(`DELETE: ${extendToUserString(target, prop)}`);
        console.info('Property: ', extendToUserString(target, prop));
        console.groupEnd();
    });
};
const logUpdate = (component, propsUpdated) => {
    debug(() => {
        console.groupCollapsed(`UPDATE:  <${component._name}>`);
        console.info('Changed properties:', propsUpdated);
        console.groupEnd();
    });
};

export { debug, debugOff, debugOn, logDelete, logGet, logSet, logUpdate };
