import state$1 from './shared/state.js';
export { useProps } from './shared/utils.js';
import { debugOn, debugOff, getListenersByComponent, getComponentsByListener } from './shared/debug.js';
export { afterChange } from './shared/pubSub.js';
export { batch, initStore } from './store.js';
import { back, forward, goTo, getHistory, clearHistory, setHistoryLimit } from './shared/timeTravel.js';
export { default as collect } from './collect.js';
export { default as PropTypes } from './shared/propTypes.js';

const { store } = state$1;
// `internals` is not part of the Recollect API. It is used by tests.
const internals = state$1;
if (typeof window !== 'undefined') {
    if ('Proxy' in window) {
        window.__RR__ = {
            debugOn,
            debugOff,
            internals: state$1,
        };
        {
            // These two helpers will be included in the dev build only. A) for size, but
            // also B) in prod, component names tend to be obscured so they would be
            // of little use.
            window.__RR__.getListenersByComponent = getListenersByComponent;
            window.__RR__.getComponentsByListener = getComponentsByListener;
            // Time travel helpers have a performance/memory impact, so are only
            // included in the dev build
            window.__RR__.back = back;
            window.__RR__.forward = forward;
            window.__RR__.goTo = goTo;
            window.__RR__.getHistory = getHistory;
            window.__RR__.clearHistory = clearHistory;
            window.__RR__.setHistoryLimit = setHistoryLimit;
        }
    }
    else {
        console.warn("This browser doesn't support the Proxy object, which react-recollect needs. See https://caniuse.com/#search=proxy to find out which browsers do support it");
    }
}

export { internals, store };
