import { whileMuted } from './utils.js';
import * as OriginalPropTypes$1 from 'prop-types';

let EnvPropTypes;
// In the dev build of Recollect, we wrap PropTypes in a proxy so we can
// mute the store while the prop types library reads the props.
{
    // The PropTypes object is made up of functions that call functions, so
    // we recursively wrap responses in the same handler
    const wrapMeIfYouCan = (item, handler) => {
        if (typeof item === 'function' ||
            (typeof item === 'object' && item !== null)) {
            return new Proxy(item, handler);
        }
        return item;
    };
    const handler = {
        get(...args) {
            return wrapMeIfYouCan(Reflect.get(...args), this);
        },
        apply(...args) {
            // Here we mute the function calls
            const result = whileMuted(() => Reflect.apply(...args));
            return wrapMeIfYouCan(result, this);
        },
    };
    EnvPropTypes = new Proxy(OriginalPropTypes$1, handler);
}
// We do this so we're exporting a const (EnvPropTypes is a let)
const PropTypes = EnvPropTypes;

export default PropTypes;
