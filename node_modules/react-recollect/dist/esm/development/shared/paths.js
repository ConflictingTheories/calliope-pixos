import { PATH, PROP_PATH_SEP } from './constants.js';
import { isObject } from './utils.js';

// Joins an array that potentially contains symbols, which need an explicit
// 'toString()'
const join = (arr, joiner) => arr.map((item) => item.toString()).join(joiner);
/**
 * Convert a target and a prop into a user-friendly string like store.tasks.1.done
 */
const makeUserString = (propPath) => join(propPath, '.');
const makeInternalString = (propPath) => join(propPath, PROP_PATH_SEP);
/**
 * Convert an internal string like `one~~~two~~~three` into a user-facing string
 * like `one.two.three`
 */
const internalToUser = (internalPath) => makeUserString(internalPath.split(PROP_PATH_SEP));
/**
 * Takes the path stored in an object, and a new prop, and returns the two
 * combined
 */
const extend = (target, prop) => {
    const basePath = target[PATH] || [];
    if (typeof prop === 'undefined')
        return basePath;
    return basePath.concat(prop);
};
/**
 * Convert a target and a prop into a user-friendly string like store.tasks.1.done
 */
const extendToUserString = (target, prop) => makeUserString(extend(target, prop));
const addProp = (target, propPath) => {
    if (!target)
        return;
    Object.defineProperty(target, PATH, {
        value: propPath,
        writable: true,
    });
};
const get = (target) => target[PATH] || [];
const has = (target) => isObject(target) && PATH in target;

export { addProp, extend, extendToUserString, get, has, internalToUser, makeInternalString, makeUserString };
